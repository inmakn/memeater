$(function(){
  $('body').on('click', '#play-button', function(){
    $('#play-button').remove();
    runGame();
  });
})

function runGame(){

    // ---------GAME TIMER------------
    // start with 30
    // decrease by 1 every 1 second
    // if 0, stop counting and do something

    var counter = 30;
    var curInterval = setInterval(function(){
      // if counter is 0, run special function and clear the interval
      if (counter === 0) {
        clearInterval(curInterval);
      } else {
        counter--;
      }
      document.getElementById('countdown-holder').innerHTML= 'Remaining Time: ' + counter + ' seconds';
      // replace counter on screen with current number
    }, 1000)
    // ---------------------------------

    var screenWidth = 700;
    var screenHeight = 500;
    var game = new Phaser.Game(screenWidth, screenHeight, Phaser.AUTO, 'mygame', { preload: preload, create: create, update: update });

    ////////// Sprite Sheets ///////////

    // Character Sprite
    var characterSprite = "<%= character.spritesheet %>"

    // Enemy Sprites
    var enemySprites = []
    var enemyNames = [];

    if (<%= environment.name == 'Dollars In The Wind' %>){
      enemySprites.push("<%= asset_path 'dollar_spritesheet.png' %>")
      enemySprites.push("<%= asset_path 'dollar_sparkle_spritesheet.png' %>")
      enemySprites.push("<%= asset_path 'mck_spritesheet.png' %>")
    }
    else {
      <% memes.each do |meme| %>
          enemySprites.push("<%= meme.spritesheet %>")
      <% end %>
    }

    // Background Image Sprites
    var bottomLayerImage = "<%= environment.bottom_layer %>"
    var middleLayerImage = "<%= environment.middle_layer %>"
    var topLayerImage = "<%= environment.top_layer %>"

    ////////// Variables and Groups ///////////

    // Character variable and Enemies group
    var player, enemy, enemies;

    // Background Groups
    var topLayer, middleLayer, bottomLayer;

    /////////// Misc ////////////

    // Keeping Score Stuff
    var scoreText, score = 0;

    // Allowing for keyboard use
    var cursors;

    function preload() {
      // Loading in background images
      game.load.audio('munch', "<%= asset_path 'nom.m4a' %>");
      game.load.audio('bg_music', "<%= asset_path 'mbm.mp3' %>");
      game.load.image('bottomLayer', bottomLayerImage);
      game.load.image('middleLayer', middleLayerImage);
      game.load.image('topLayer', topLayerImage);

      //Loading in enemies spritesheets
      var name;
      for(var i = 0; i < enemySprites.length; i++){
        name = 'enemy' + (i + 1);
        enemyNames.push(name);
        game.load.spritesheet(name, enemySprites[i], 58.3, 50);
      }

      // Loading in character sprite and background music
      game.load.spritesheet('character', characterSprite, 42.4, 45);
      bg_music = game.add.audio('bg_music');
    }

    function create() {
      var xPos, yPos, xSpeed, ySpeed;
      var enemy, randomFrame;

      munch_sound = game.add.audio('munch');
      bg_music.play();

      //  We're going to be using physics, so enable the Arcade Physics system
      game.physics.startSystem(Phaser.Physics.ARCADE);

      bottomLayer = game.add.tileSprite(0, 0, 800, 1200, 'bottomLayer');
      middleLayer = game.add.group();
      topLayer = game.add.group();
      enemies = game.add.group();

      // Randomly placing 30 middle layer images
      for(var i = 0; i < 15; i++) {
        pos = generateRandomPositionOnScreen()
        middleLayer.create(pos[0], pos[1], 'middleLayer');
        pos = generateRandomPositionAboveScreen()
        middleLayer.create(pos[0], pos[1], 'middleLayer');
      }

      // Randomly placing 16 top layer images
      for(var i = 0; i < 4; i++) {
        pos = generateRandomPositionOnScreen()
        topLayer.create(pos[0], pos[1], 'topLayer');
        pos = generateRandomPositionAboveScreen()
        topLayer.create(pos[0], pos[1], 'topLayer');
      }

      // Randomly placing 30 meme enemies
      for(var i = 0; i < 30; i++) {
        createEnemy();
      }

      // The player and its settings
      player = game.add.sprite(game.world.width / 2, game.world.height / 2 + 100, 'character');
      enablePhysics(player);

      player.body.collideWorldBounds = true;

      //  Animations
      player.animations.add('move', [1, 2, 3, 4], 8, true);
      player.animations.add('attack', [3, 4], 8, false);

      //  Our controls.
      cursors = game.input.keyboard.createCursorKeys();
      //attackButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

      scoreText = game.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#0000FF' });
    }

    function update() {

      scrollBackground();
      detectPlayerCollisionWithEnemies();
      updatePlayerMovement();
      if (counter === 0) {
        endGame(score);
      }
    }

    function enablePhysics(entity){
      game.physics.arcade.enable(entity);
    }

    function createEnemy(){
      // Choosing a random enemy sprite and inserting into game
      memeName = enemyNames[Math.floor(Math.random()*enemyNames.length)];
      randomFrame = Math.floor(Math.random() * 6);
      pos = generateRandomPositionAboveScreen()
      enemy = enemies.create(pos[0], pos[1], memeName, randomFrame);

      // Giving the enemies physics (e.g. velocities, bounce)
      enablePhysics(enemy);
      speedVector = generateRandomSpeedVector(enemy)
      enemy.body.velocity.x = speedVector[0];
      enemy.body.velocity.y = speedVector[1];

      // Making the enemies dance
      enemy.animations.add('jiggle', [0, 1, 2, 3, 4, 6], 5, true);
      enemy.animations.play('jiggle');
    }

    function generateRandomPositionOnScreen(){
      xPos = Math.floor(Math.random() * screenWidth);
      yPos = Math.floor(Math.random() * screenHeight);
      return [xPos, yPos]
    }

    function generateRandomPositionAboveScreen(){
      xPos = Math.floor(Math.random() * screenWidth);
      yPos = Math.floor(Math.random() * screenHeight) - screenHeight;
      return [xPos, yPos]
    }

    function generateRandomSpeedVector(enemy){
      xSpeed = Math.floor(Math.random() * 40) - 20
      ySpeed = Math.floor(Math.random() * 300) + 100
      return [xSpeed, ySpeed];
    }

    function scrollBackground(){

      topLayer.y += 4;
      middleLayer.y += 2;
      bottomLayer.tilePosition.y += 1;

      // Moving the groups back up top if they've fallen too far
      var resetLimit = screenHeight * 2 + 300
      if (topLayer.y > resetLimit) {
        topLayer.y = -screenHeight * 1.5;
        for(var i = 0; i < 30; i++) {
          createEnemy();
        }
      }
      if (middleLayer.y > resetLimit) {
        middleLayer.y = -screenHeight * 1.25;
      }
    }

    function updatePlayerMovement(){
      //  Reset the player's velocity (movement)
      player.body.velocity.x = 0;
      player.body.velocity.y = 0;

      // Dictating what animations should be used
      playerSpeed = 200;
      if (cursors.left.isDown)
      {
          player.body.velocity.x = -playerSpeed;
          player.animations.play('move');
      }
      else if (cursors.right.isDown)
      {
          player.body.velocity.x = playerSpeed;
          player.animations.play('move');
      }
      if (cursors.up.isDown)
      {
          player.body.velocity.y = -playerSpeed;
          player.animations.play('move');
      }
      else if (cursors.down.isDown) {
          player.body.velocity.y = playerSpeed;
          player.animations.play('move');
      }
      else {
        player.animations.stop();
      }
    }

    function detectPlayerCollisionWithEnemies(){
      game.physics.arcade.overlap(player, enemies, eatMeme, null, this);
      user_score = score;

      // -----Ends game-----
      if (counter === 0) {
        bg_music.stop();
        game.destroy();
        $('canvas').fadeOut(1000);
        var scoreMessage = 'Score: ' + user_score
        $('<h2 id="user_score">').text(scoreMessage).appendTo('#mygame');

        // send user_score and user.id to database for Game model
        var gameId = <%= @game.id %>;
        var gameScore = user_score;
        var params = { game: { score: gameScore, finished: true } }

        $.ajax({
          url: '/games/' + gameId,
          type: 'PUT',
          data: params
        })
        .done(console.log('Done.'));
        // ------------------------------------------------------
      }
    }

    function eatMeme (player, meme) {
      meme.kill();
      munch_sound.play();
      score += 15;
      scoreText.text = 'Score: ' + score;
    }

    function endGame(){
      bg_music.stop();
      game.destroy();
      $('canvas').fadeOut(1000);
      var scoreMessage = 'Score: ' + score
      $('<h2 id="user_score">').text(scoreMessage).appendTo('#mygame');

      // send user_score and user.id to database for Game model
      var gameId = <%= @game.id %>;
      var params = { game: { score: score } }

      $.ajax({
        url: '/games/' + gameId,
        type: 'PUT',
        data: params
      })
      .done();
    }
}
