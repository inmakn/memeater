<h2>Start New Game Here</h2>


<script type="text/javascript">
  var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

  var platformAssetPath = "<%= asset_path('platform.png') %>";
  var skyAssetPath = "<%= asset_path('sky.png') %>";
  var starAssetPath = "<%= asset_path('star.png') %>";
  var dudeAssetPath = "<%= asset_path('dude.png') %>";
  var dogeAssetPath = "<%= asset_path('doge_sprite.png') %>";
  var diamondAssetPath = "<%= asset_path('diamond.png') %>";
  var cloudAssetPath = "<%= asset_path('cloud.png') %>";


  function preload() {

      game.load.image('sky', skyAssetPath);
      game.load.image('diamond', diamondAssetPath);
      game.load.image('ground', platformAssetPath);
      game.load.image('star', starAssetPath);
      game.load.spritesheet('doge', dogeAssetPath, 55, 50);
      game.load.image('cloud', cloudAssetPath);

  }

  var player;
  var platforms;
  var cursors;
  var clouds;
  var clouds2;

  var diamond;
  var bground;
  var stars;
  var score = 0;
  var scoreText;

  function create() {

      //  We're going to be using physics, so enable the Arcade Physics system
      game.physics.startSystem(Phaser.Physics.ARCADE);
      game.scale.pageAlignHorizontally = true;
      game.scale.pageAlignVertically = true;
      game.scale.refresh();

      //  A simple background for our game
      bground = game.add.tileSprite(0, 0, 800, 600, 'sky');

      //  The platforms group contains the ground and the 2 ledges we can jump on
      clouds = game.add.group();
      clouds2 = game.add.group();

      //platforms = game.add.group();

      // Create some clouds
      var xPos;
      var yPos;

      // Creating clouds that appear immediately on screen
      for(var i = 0; i < 6; i++) {
        xPos = Math.floor(Math.random() * 800) - 100;
        yPos = Math.floor(Math.random() * 400) - 100;
        clouds.create(xPos, yPos, 'cloud');
      }

      // Creating clouds that are not immediately on screen (they're just above)
      for(var i = 0; i < 6; i++) {
        xPos = Math.floor(Math.random() * 600);
        yPos = Math.floor(Math.random() * 400) - 400;
        clouds2.create(xPos, yPos, 'cloud');
      }


      //  We will enable physics for any object that is created in this group
      //platforms.enableBody = true;

      // Here we create the ground.
      //var ground = platforms.create(0, game.world.height - 64, 'ground');

      // //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
      // ground.scale.setTo(2, 2);
      //
      // //  This stops it from falling away when you jump on it
      // ground.body.immovable = true;

      //  Now let's create two ledges
      // var ledge = platforms.create(400, 400, 'ground');
      // ledge.body.immovable = true;
      //
      // ledge = platforms.create(-150, 250, 'ground');
      // ledge.body.immovable = true;
      //
      // ledge = platforms.create(600, 150, 'ground');
      // ledge.body.immovable = true;

      // The player and its settings
      player = game.add.sprite(32, game.world.height - 150, 'doge');

      //  We need to enable physics on the player
      game.physics.arcade.enable(player);

      //  Player physics properties. Give the little guy a slight bounce.
      // player.body.bounce.y = 0.2;
      // player.body.gravity.y = 900;
      player.body.collideWorldBounds = true;
      player.anchor.setTo(0.5, 0.5);

      //  Our two animations, walking left and right.
      player.animations.add('left', [0, 1, 2], 10, true);
      player.animations.add('right', [2, 1, 0], 10, true);
      player.animations.add('up', [0, 1, 2], 10, true);
      player.animations.add('down', [0, 1, 2], 10, true);


      //  Finally some stars to collect
      stars = game.add.group();

      //  We will enable physics for any star that is created in this group
      stars.enableBody = true;

      // //  Here we'll create 12 of them evenly spaced apart
      // for (var i = 0; i < 12; i++)
      // {
      //    //  Create a star inside of the 'stars' group
      //    var star = stars.create(i * 70, 0, 'star');
      //
      //    //  Let gravity do its thing
      //    star.body.gravity.y = 800;
      //
      //    //  This just gives each star a slightly random bounce value
      //    star.body.bounce.y = 0.7 + Math.random() * 0.2;
      // }
      //
      // //  The score
      // scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

      //  Our controls.
      cursors = game.input.keyboard.createCursorKeys();

  }

  function update() {

      bground.tilePosition.y += 1;

      if (clouds.y > 600) {
        clouds.y = -500;
      }
      clouds.y += 3;

      if (clouds2.y > 900) {
        clouds2.y = -500;
      }
      clouds2.y += 3;


      //  Collide the player and the stars with the platforms
      // game.physics.arcade.collide(player, platforms);
      // game.physics.arcade.collide(stars, platforms);

      //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
      //game.physics.arcade.overlap(player, stars, collectStar, null, this);

      //  Reset the players velocity (movement)
      player.body.velocity.x = 0;
      player.body.velocity.y = 0;

      if (cursors.left.isDown)
      {
          player.scale.x = -1;
          player.body.velocity.x = -150;
          player.animations.play('left');
      }
      else if (cursors.right.isDown)
      {
          player.scale.x = 1;
          player.body.velocity.x = 150;
          player.animations.play('right');
      }

      if (cursors.up.isDown)
      {
          player.body.velocity.y = -150;
          player.animations.play('up');
      }
      else if (cursors.down.isDown) {
          player.body.velocity.y = 150;
          player.animations.play('down');
      }
      else
      {
          //  Stand still
          player.animations.stop();
          player.frame = 1;
      }
  }

</script>
